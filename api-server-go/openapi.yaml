openapi: 3.0.3
info:
  title: API Server
  description: |
    Government Data Exchange API Server for managing consumers, providers, and data access workflows.
    This service handles consumer applications, provider submissions, schema management, and access control.
  version: 1.0.0
  contact:
    name: OpenDIF Team
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api-server.choreo.dev
    description: Choreo Production Environment
  - url: https://api-server-dev.choreo.dev
    description: Choreo Development Environment
  - url: http://localhost:3000
    description: Local Development Environment

paths:
  /health:
    get:
      summary: Health Check
      description: Check if the API server is running and healthy with database status and connection pool metrics
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, warning, critical]
                    example: healthy
                  service:
                    type: string
                    example: api-server
                  database:
                    type: string
                    example: available
                  connection_pool:
                    type: object
                    properties:
                      maxOpenConns:
                        type: integer
                      openConns:
                        type: integer
                      inUse:
                        type: integer
                      idle:
                        type: integer
                  utilization_percent:
                    type: number
                    format: float
                    example: 25.5
                  duration:
                    type: string
                    example: 2.5ms
                  timestamp:
                    type: integer
                    format: int64
                    example: 1640995200
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: unhealthy
                  service:
                    type: string
                    example: api-server
                  database:
                    type: string
                    example: unavailable
                  error:
                    type: string
                    example: connection refused
                  duration:
                    type: string
                    example: 5.2ms
                  timestamp:
                    type: integer
                    format: int64
                    example: 1640995200

  /debug:
    get:
      summary: Debug Information
      description: Get basic debug information about the API server
      operationId: debugInfo
      tags:
        - Debug
      responses:
        '200':
          description: Debug information
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                    example: /debug
                  method:
                    type: string
                    example: GET

  /debug/db:
    get:
      summary: Database Debug Information
      description: Get detailed database connection and table information for debugging
      operationId: debugDatabase
      tags:
        - Debug
      responses:
        '200':
          description: Database debug information
          content:
            application/json:
              schema:
                type: object
                properties:
                  database_connected:
                    type: boolean
                    example: true
                  consumers_table_exists:
                    type: boolean
                    example: true
                  consumers_count:
                    type: integer
                    example: 0
                  table_structure:
                    type: string
                    example: "Columns: consumer_id (character varying), entity_id (character varying), created_at (timestamp with time zone), updated_at (timestamp with time zone)"
                  select_query_test:
                    type: string
                    example: "SELECT query succeeded"
        '503':
          description: Database connection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "database ping failed: connection refused"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "failed to check table existence: permission denied"

  /consumers:
    get:
      summary: List All Consumers
      description: Retrieve all registered data consumers
      operationId: listConsumers
      tags:
        - Consumers
      responses:
        '200':
          description: List of consumers
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Consumer'
                  count:
                    type: integer
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to retrieve items: Database operation failed"
    post:
      summary: Create Consumer
      description: Register a new data consumer
      operationId: createConsumer
      tags:
        - Consumers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerRequest'
      responses:
        '201':
          description: Consumer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request body"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to retrieve items: Database operation failed"

  /consumers/{consumerId}:
    get:
      summary: Get Consumer
      description: Retrieve a specific consumer by ID
      operationId: getConsumer
      tags:
        - Consumers
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Consumer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
    put:
      summary: Update Consumer
      description: Update consumer information
      operationId: updateConsumer
      tags:
        - Consumers
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsumerRequest'
      responses:
        '200':
          description: Consumer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
    delete:
      summary: Delete Consumer
      description: Remove a consumer and all associated data
      operationId: deleteConsumer
      tags:
        - Consumers
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Consumer deleted successfully

  /consumer-applications:
    get:
      summary: List All Consumer Applications
      description: Retrieve all consumer applications (admin view)
      operationId: listConsumerApplications
      tags:
        - Consumer Applications
      responses:
        '200':
          description: List of consumer applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsumerApp'
                  count:
                    type: integer

  /consumer-applications/{consumerId}:
    get:
      summary: Get Consumer Applications
      description: Retrieve applications for a specific consumer
      operationId: getConsumerApplications
      tags:
        - Consumer Applications
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Consumer applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsumerApp'
                  count:
                    type: integer
    post:
      summary: Create Consumer Application
      description: |
        Create a new application for a consumer to access specific data fields.
        The application includes required fields with grant durations for access control.
        When approved, this will automatically update provider metadata in the PDP.
      operationId: createConsumerApplication
      tags:
        - Consumer Applications
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
          description: ID of the consumer creating the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerAppRequest'
            example:
              requiredFields:
                - fieldName: "birthinfo.birthDate"
                  grantDuration: "P30D"
                - fieldName: "birthinfo.birthCertificateID"
                  grantDuration: "P60D"
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerApp'

  /consumer-applications/{submissionId}:
    get:
      summary: Get Consumer Application
      description: Retrieve a specific consumer application
      operationId: getConsumerApplication
      tags:
        - Consumer Applications
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerApp'
    put:
      summary: Update Consumer Application
      description: |
        Update application status (admin approval/denial) or modify required fields.
        When status is changed to 'approved', the system will automatically:
        - Generate API credentials for the consumer
        - Update provider metadata in the PDP with the granted field access
        - Set expiration times based on grant durations
      operationId: updateConsumerApplication
      tags:
        - Consumer Applications
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the application submission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsumerAppRequest'
            examples:
              approve:
                summary: Approve Application
                value:
                  status: "approved"
              deny:
                summary: Deny Application
                value:
                  status: "denied"
              update_fields:
                summary: Update Required Fields
                value:
                  requiredFields:
                    - fieldName: "birthinfo.birthDate"
                      grantDuration: "P90D"
                    - fieldName: "person.fullName"
                      grantDuration: "P30D"
      responses:
        '200':
          description: Application updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConsumerAppResponse'

  /provider-submissions:
    get:
      summary: List Provider Submissions
      description: Retrieve all provider registration submissions
      operationId: listProviderSubmissions
      tags:
        - Provider Submissions
      responses:
        '200':
          description: List of provider submissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderSubmission'
                  count:
                    type: integer
    post:
      summary: Create Provider Submission
      description: Submit a new provider registration request
      operationId: createProviderSubmission
      tags:
        - Provider Submissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderSubmissionRequest'
      responses:
        '201':
          description: Submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderSubmission'

  /provider-submissions/{submissionId}:
    get:
      summary: Get Provider Submission
      description: Retrieve a specific provider submission
      operationId: getProviderSubmission
      tags:
        - Provider Submissions
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Submission details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderSubmission'
    put:
      summary: Update Provider Submission
      description: Update submission status (admin approval)
      operationId: updateProviderSubmission
      tags:
        - Provider Submissions
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProviderSubmissionRequest'
      responses:
        '200':
          description: Submission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProviderSubmissionResponse'

  /providers:
    get:
      summary: List Providers
      description: Retrieve all approved provider profiles
      operationId: listProviders
      tags:
        - Providers
      responses:
        '200':
          description: List of providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderProfile'

  /providers/{providerId}:
    get:
      summary: Get Provider
      description: Retrieve a specific provider profile
      operationId: getProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Provider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderProfile'

  /providers/{providerId}/schemas:
    get:
      summary: List Approved Schemas
      description: Retrieve approved schemas for a provider
      operationId: listProviderSchemas
      tags:
        - Provider Schemas
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of approved schemas
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderSchema'
                  count:
                    type: integer

  /providers/{providerId}/schema-submissions:
    get:
      summary: List Schema Submissions
      description: Retrieve all schema submissions for a provider
      operationId: listProviderSchemaSubmissions
      tags:
        - Provider Schemas
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of schema submissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SchemaSubmission'
                  count:
                    type: integer
    post:
      summary: Create Schema Submission
      description: Create a new schema submission or modify existing
      operationId: createProviderSchemaSubmission
      tags:
        - Provider Schemas
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderSchemaSubmissionRequest'
      responses:
        '201':
          description: Schema submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaSubmission'

  /providers/{providerId}/schema-submissions/{schemaId}:
    get:
      summary: Get Schema Submission
      description: Retrieve a specific schema submission
      operationId: getProviderSchemaSubmission
      tags:
        - Provider Schemas
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
        - name: schemaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Schema submission details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderSchema'
    put:
      summary: Update Schema Submission
      description: Update schema submission (submit for review or admin approval)
      operationId: updateProviderSchemaSubmission
      tags:
        - Provider Schemas
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
        - name: schemaId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProviderSchemaRequest'
      responses:
        '200':
          description: Schema submission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderSchema'

  /admin/metrics:
    get:
      summary: Get System Metrics
      description: Retrieve system performance metrics
      operationId: getSystemMetrics
      tags:
        - Admin
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object

  /admin/recent-activity:
    get:
      summary: Get Recent Activity
      description: Retrieve recent system activity
      operationId: getRecentActivity
      tags:
        - Admin
      responses:
        '200':
          description: Recent activity
          content:
            application/json:
              schema:
                type: object

  /admin/statistics:
    get:
      summary: Get Statistics
      description: Retrieve detailed statistics by resource type
      operationId: getStatistics
      tags:
        - Admin
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                type: object

  /admin/fields/{fieldName}/allow-list:
    get:
      summary: Get Allow List
      description: Retrieve consumers in allow list for a field
      operationId: getAllowList
      tags:
        - Allow List Management
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Allow list for field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowListListResponse'
    post:
      summary: Add to Allow List
      description: Add a consumer to allow list for a field
      operationId: addToAllowList
      tags:
        - Allow List Management
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowListManagementRequest'
      responses:
        '201':
          description: Consumer added to allow list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowListManagementResponse'

  /admin/fields/{fieldName}/allow-list/{consumerId}:
    put:
      summary: Update Allow List Entry
      description: Update consumer in allow list for a field
      operationId: updateAllowListEntry
      tags:
        - Allow List Management
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowListManagementRequest'
      responses:
        '200':
          description: Allow list entry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowListManagementResponse'
    delete:
      summary: Remove from Allow List
      description: Remove consumer from allow list for a field
      operationId: removeFromAllowList
      tags:
        - Allow List Management
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Consumer removed from allow list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowListManagementResponse'

  # Consumer Grants endpoints
  /consumer-grants:
    get:
      summary: List All Consumer Grants
      description: Retrieve all consumer grants
      operationId: listConsumerGrants
      tags:
        - Consumer Grants
      responses:
        '200':
          description: List of consumer grants
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsumerGrant'
                  count:
                    type: integer
    post:
      summary: Create Consumer Grant
      description: Create a new consumer grant
      operationId: createConsumerGrant
      tags:
        - Consumer Grants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerGrantRequest'
      responses:
        '201':
          description: Consumer grant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGrant'

  /consumer-grants/{consumerId}:
    get:
      summary: Get Consumer Grant
      description: Retrieve a specific consumer grant
      operationId: getConsumerGrant
      tags:
        - Consumer Grants
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Consumer grant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGrant'
    put:
      summary: Update Consumer Grant
      description: Update a consumer grant
      operationId: updateConsumerGrant
      tags:
        - Consumer Grants
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsumerGrantRequest'
      responses:
        '200':
          description: Consumer grant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGrant'
    delete:
      summary: Delete Consumer Grant
      description: Delete a consumer grant
      operationId: deleteConsumerGrant
      tags:
        - Consumer Grants
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Consumer grant deleted successfully

  # Provider Fields endpoints
  /provider-fields:
    get:
      summary: List All Provider Fields
      description: Retrieve all provider field metadata
      operationId: listProviderFields
      tags:
        - Provider Fields
      responses:
        '200':
          description: List of provider fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderField'
                  count:
                    type: integer
    post:
      summary: Create Provider Field
      description: Create a new provider field metadata
      operationId: createProviderField
      tags:
        - Provider Fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderFieldRequest'
      responses:
        '201':
          description: Provider field created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderField'

  /provider-fields/{fieldName}:
    get:
      summary: Get Provider Field
      description: Retrieve a specific provider field metadata
      operationId: getProviderField
      tags:
        - Provider Fields
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Provider field details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderField'
    put:
      summary: Update Provider Field
      description: Update a provider field metadata
      operationId: updateProviderField
      tags:
        - Provider Fields
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProviderFieldRequest'
      responses:
        '200':
          description: Provider field updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderField'
    delete:
      summary: Delete Provider Field
      description: Delete a provider field metadata
      operationId: deleteProviderField
      tags:
        - Provider Fields
      parameters:
        - name: fieldName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Provider field deleted successfully

  # Consent Records endpoints
  /consent-records:
    get:
      summary: List All Consent Records
      description: Retrieve all consent records
      operationId: listConsentRecords
      tags:
        - Consent Records
      responses:
        '200':
          description: List of consent records
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsentRecord'
                  count:
                    type: integer

  /consent-records/{consentId}:
    get:
      summary: Get Consent Record
      description: Retrieve a specific consent record
      operationId: getConsentRecord
      tags:
        - Consent Records
      parameters:
        - name: consentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Consent record details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRecord'

  # V1 API Endpoints
  /api/v1/providers/{providerId}:
    get:
      summary: Get Provider (V1)
      description: Retrieve provider information by ID
      operationId: getProviderV1
      tags:
        - V1 API
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
          description: Provider ID
      responses:
        '200':
          description: Provider information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResponseV1'
        '404':
          description: Provider not found

  /api/v1/providers/{providerId}/schemas:
    get:
      summary: Get Provider Schemas (V1)
      description: Retrieve approved schemas for a provider
      operationId: getProviderSchemasV1
      tags:
        - V1 API
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
          description: Provider ID
      responses:
        '200':
          description: List of approved schemas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseV1'

  /api/v1/providers/{providerId}/schema-submissions:
    get:
      summary: Get Provider Schema Submissions (V1)
      description: Retrieve schema submissions for a provider
      operationId: getProviderSchemaSubmissionsV1
      tags:
        - V1 API
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
          description: Provider ID
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, approved, rejected]
          description: Filter by submission status
      responses:
        '200':
          description: List of schema submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseV1'
    post:
      summary: Create Provider Schema Submission (V1)
      description: Create a new schema submission for a provider
      operationId: createProviderSchemaSubmissionV1
      tags:
        - V1 API
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
          description: Provider ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderSchemaSubmissionRequestV1'
      responses:
        '201':
          description: Schema submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderSchemaSubmissionResponseV1'
        '400':
          description: Bad request

  /api/v1/consumers/{consumerId}:
    get:
      summary: Get Consumer (V1)
      description: Retrieve consumer information by ID
      operationId: getConsumerV1
      tags:
        - V1 API
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
          description: Consumer ID
      responses:
        '200':
          description: Consumer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerResponseV1'
        '404':
          description: Consumer not found

  /api/v1/consumers/{consumerId}/applications:
    get:
      summary: Get Consumer Applications (V1)
      description: Retrieve applications for a consumer
      operationId: getConsumerApplicationsV1
      tags:
        - V1 API
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
          description: Consumer ID
      responses:
        '200':
          description: List of consumer applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseV1'

  /api/v1/consumers/{consumerId}/application-submissions:
    get:
      summary: Get Consumer Application Submissions (V1)
      description: Retrieve application submissions for a consumer
      operationId: getConsumerApplicationSubmissionsV1
      tags:
        - V1 API
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
          description: Consumer ID
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, approved, rejected]
          description: Filter by submission status
      responses:
        '200':
          description: List of application submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponseV1'
    post:
      summary: Create Consumer Application Submission (V1)
      description: Create a new application submission for a consumer
      operationId: createConsumerApplicationSubmissionV1
      tags:
        - V1 API
      parameters:
        - name: consumerId
          in: path
          required: true
          schema:
            type: string
          description: Consumer ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerApplicationSubmissionRequestV1'
      responses:
        '201':
          description: Application submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerApplicationSubmissionResponseV1'
        '400':
          description: Bad request

  /api/v1/entities/{entityId}:
    get:
      summary: Get Entity (V1)
      description: Retrieve entity information by ID, including provider and consumer IDs if available
      operationId: getEntityV1
      tags:
        - V1 API
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
          description: Entity ID
      responses:
        '200':
          description: Entity information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponseV1'
        '404':
          description: Entity not found

components:
  schemas:
    Consumer:
      type: object
      properties:
        consumerId:
          type: string
          description: Unique identifier for the consumer
        consumerName:
          type: string
          description: Name of the consumer organization
        contactEmail:
          type: string
          description: Contact email address
        phoneNumber:
          type: string
          description: Phone number
        createdAt:
          type: string
          format: date-time
          description: When the consumer was created

    CreateConsumerRequest:
      type: object
      required:
        - consumerName
        - contactEmail
      properties:
        consumerName:
          type: string
          description: Name of the consumer organization
        contactEmail:
          type: string
          description: Contact email address
        phoneNumber:
          type: string
          description: Phone number

    UpdateConsumerRequest:
      type: object
      properties:
        consumerName:
          type: string
          description: Name of the consumer organization
        contactEmail:
          type: string
          description: Contact email address
        phoneNumber:
          type: string
          description: Phone number

    ConsumerApp:
      type: object
      properties:
        submissionId:
          type: string
          description: Unique identifier for the application
        consumerId:
          type: string
          description: ID of the consumer
        status:
          type: string
          enum: [pending, approved, denied]
          description: Application status
        requiredFields:
          type: array
          items:
            $ref: '#/components/schemas/RequiredField'
          description: Fields required by the consumer with grant durations
        credentials:
          $ref: '#/components/schemas/Credentials'
        createdAt:
          type: string
          format: date-time
          description: When the application was created
        updatedAt:
          type: string
          format: date-time
          description: When the application was last updated

    RequiredField:
      type: object
      required:
        - fieldName
      properties:
        fieldName:
          type: string
          description: Name of the data field
          example: "birthinfo.birthDate"
        grantDuration:
          type: string
          description: Duration for which access is granted in ISO 8601 format
          example: "P30D"
          pattern: "^P(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?:\\d+H)?(?:\\d+M)?(?:\\d+(?:\\.\\d+)?S)?)?$"

    CreateConsumerAppRequest:
      type: object
      required:
        - requiredFields
      properties:
        requiredFields:
          type: array
          items:
            $ref: '#/components/schemas/RequiredField'
          description: Fields required by the consumer with grant durations

    UpdateConsumerAppRequest:
      type: object
      properties:
        status:
          type: string
          enum: [pending, approved, denied]
          description: New application status
        requiredFields:
          type: array
          items:
            $ref: '#/components/schemas/RequiredField'
          description: Fields required by the consumer with grant durations

    UpdateConsumerAppResponse:
      type: object
      properties:
        consumerApp:
          $ref: '#/components/schemas/ConsumerApp'
        providerId:
          type: string
          description: Provider ID (when approved)

    Credentials:
      type: object
      properties:
        apiKey:
          type: string
          description: API key for authentication
        apiSecret:
          type: string
          description: API secret for authentication

    ProviderMetadataUpdateRequest:
      type: object
      required:
        - application_id
        - fields
      properties:
        application_id:
          type: string
          description: ID of the consumer application
          example: "passport-app"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ProviderFieldGrant'
          description: List of fields to grant access to
          minItems: 1

    ProviderFieldGrant:
      type: object
      required:
        - fieldName
        - grantDuration
      properties:
        fieldName:
          type: string
          description: Name of the data field
          example: "birthinfo.birthDate"
        grantDuration:
          type: string
          description: Duration for which access is granted in ISO 8601 format
          example: "P30D"
          pattern: "^P(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?:\\d+H)?(?:\\d+M)?(?:\\d+(?:\\.\\d+)?S)?)?$"

    ProviderMetadataUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Human-readable message about the result
        updated:
          type: integer
          description: Number of fields that were updated

    ProviderSubmission:
      type: object
      properties:
        submissionId:
          type: string
          description: Unique identifier for the submission
        providerName:
          type: string
          description: Name of the provider organization
        contactEmail:
          type: string
          description: Contact email address
        phoneNumber:
          type: string
          description: Phone number
        providerType:
          type: string
          enum: [government, board, business]
          description: Type of provider
        status:
          type: string
          enum: [pending, approved, rejected]
          description: Submission status
        createdAt:
          type: string
          format: date-time
          description: When the submission was created

    CreateProviderSubmissionRequest:
      type: object
      required:
        - providerName
        - contactEmail
        - phoneNumber
        - providerType
      properties:
        providerName:
          type: string
          description: Name of the provider organization
        contactEmail:
          type: string
          description: Contact email address
        phoneNumber:
          type: string
          description: Phone number
        providerType:
          type: string
          enum: [government, board, business]
          description: Type of provider

    UpdateProviderSubmissionRequest:
      type: object
      properties:
        status:
          type: string
          enum: [pending, approved, rejected]
          description: New submission status

    UpdateProviderSubmissionResponse:
      type: object
      properties:
        providerSubmission:
          $ref: '#/components/schemas/ProviderSubmission'
        providerId:
          type: string
          description: Provider ID (when approved)

    ProviderProfile:
      type: object
      properties:
        providerId:
          type: string
          description: Unique identifier for the provider
        providerName:
          type: string
          description: Name of the provider organization
        contactEmail:
          type: string
          description: Contact email address
        phoneNumber:
          type: string
          description: Phone number
        providerType:
          type: string
          enum: [government, board, business]
          description: Type of provider
        approvedAt:
          type: string
          format: date-time
          description: When the provider was approved
        createdAt:
          type: string
          format: date-time
          description: When the provider was created
        updatedAt:
          type: string
          format: date-time
          description: When the provider was last updated

    ProviderSchema:
      type: object
      properties:
        submissionId:
          type: string
          description: Unique identifier for the schema submission
        providerId:
          type: string
          description: ID of the provider
        schemaId:
          type: string
          description: Schema ID (when approved)
        status:
          type: string
          enum: [draft, pending, approved, rejected]
          description: Schema status
        schemaInput:
          type: object
          description: Schema input data
        sdl:
          type: string
          description: GraphQL SDL definition
        schema_endpoint:
          type: string
          description: GraphQL endpoint URL
        fieldConfigurations:
          type: object
          description: Field configuration data
        createdAt:
          type: string
          format: date-time
          description: When the schema was created
        updatedAt:
          type: string
          format: date-time
          description: When the schema was last updated

    SchemaRegistration:
      type: object
      required:
        - sdl
        - schema_endpoint
      properties:
        sdl:
          type: string
          description: GraphQL SDL definition
        previous_schema_id:
          type: string
          nullable: true
          description: Previous schema ID (for modifications)
        schema_endpoint:
          type: string
          description: GraphQL endpoint URL

    SchemaSubmission:
      type: object
      required:
        - submissionId
        - created_at
        - status
        - providerId
        - sdl
        - schema_endpoint
      properties:
        submissionId:
          type: string
          description: Unique submission identifier
        created_at:
          type: string
          format: date-time
          description: When the submission was created
        status:
          type: string
          enum: [draft, pending, approved, rejected]
          description: Current status of the submission
        providerId:
          type: string
          description: Provider identifier
        sdl:
          type: string
          description: GraphQL SDL definition
        previous_schema_id:
          type: string
          nullable: true
          description: Previous schema ID (for modifications)
        schema_endpoint:
          type: string
          description: GraphQL endpoint URL
        fieldConfigurations:
          type: object
          description: Field configuration data
        updatedAt:
          type: string
          format: date-time
          description: When the submission was last updated

    CreateProviderSchemaSubmissionRequest:
      type: object
      required:
        - sdl
        - schema_endpoint
      properties:
        sdl:
          type: string
          description: GraphQL SDL definition
        previous_schema_id:
          type: string
          nullable: true
          description: Previous schema ID (for modifications)
        schema_endpoint:
          type: string
          description: GraphQL endpoint URL

    UpdateProviderSchemaRequest:
      type: object
      properties:
        status:
          type: string
          enum: [draft, pending, approved, rejected]
          description: New schema status
        fieldConfigurations:
          type: object
          description: Field configuration data

    AllowListManagementRequest:
      type: object
      required:
        - consumerId
        - expiresAt
      properties:
        consumerId:
          type: string
          description: ID of the consumer
        expiresAt:
          type: integer
          format: int64
          description: Expiry timestamp
        grantDuration:
          type: string
          description: Duration of the grant
        reason:
          type: string
          description: Reason for the grant
        updatedBy:
          type: string
          description: Who updated the grant

    AllowListManagementResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        operation:
          type: string
          description: Type of operation performed
        fieldName:
          type: string
          description: Name of the field
        consumerId:
          type: string
          description: ID of the consumer
        data:
          $ref: '#/components/schemas/AllowListEntry'
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    AllowListListResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        fieldName:
          type: string
          description: Name of the field
        allowList:
          type: array
          items:
            $ref: '#/components/schemas/AllowListEntry'
        count:
          type: integer
          description: Number of entries
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    AllowListEntry:
      type: object
      properties:
        consumer_id:
          type: string
          description: ID of the consumer
        expiry_time:
          type: string
          description: Expiry time
        created_at:
          type: string
          format: date-time
          description: When the entry was created

    ConsumerGrant:
      type: object
      properties:
        consumerId:
          type: string
          description: Unique identifier for the consumer
        approvedFields:
          type: object
          additionalProperties: true
          description: Fields approved for the consumer
        createdAt:
          type: string
          format: date-time
          description: When the grant was created
        updatedAt:
          type: string
          format: date-time
          description: When the grant was last updated

    CreateConsumerGrantRequest:
      type: object
      required:
        - consumerId
        - approvedFields
      properties:
        consumerId:
          type: string
          description: ID of the consumer
        approvedFields:
          type: object
          additionalProperties: true
          description: Fields to approve for the consumer

    UpdateConsumerGrantRequest:
      type: object
      properties:
        approvedFields:
          type: object
          additionalProperties: true
          description: Updated approved fields

    ProviderField:
      type: object
      properties:
        fieldName:
          type: string
          description: Name of the field
        owner:
          type: string
          description: Owner of the field
        provider:
          type: string
          description: Provider of the field
        consentRequired:
          type: boolean
          description: Whether consent is required
        accessControlType:
          type: string
          enum: [public, private, restricted]
          description: Type of access control
        allowList:
          type: object
          additionalProperties: true
          description: Allow list for restricted access
        description:
          type: string
          description: Description of the field
        expiryTime:
          type: string
          description: Expiry time for the field
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
        createdAt:
          type: string
          format: date-time
          description: When the field was created
        updatedAt:
          type: string
          format: date-time
          description: When the field was last updated

    CreateProviderFieldRequest:
      type: object
      required:
        - fieldName
        - owner
        - provider
      properties:
        fieldName:
          type: string
          description: Name of the field
        owner:
          type: string
          description: Owner of the field
        provider:
          type: string
          description: Provider of the field
        consentRequired:
          type: boolean
          default: false
          description: Whether consent is required
        accessControlType:
          type: string
          enum: [public, private, restricted]
          default: public
          description: Type of access control
        allowList:
          type: object
          additionalProperties: true
          description: Allow list for restricted access
        description:
          type: string
          description: Description of the field
        expiryTime:
          type: string
          description: Expiry time for the field
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    UpdateProviderFieldRequest:
      type: object
      properties:
        consentRequired:
          type: boolean
          description: Whether consent is required
        accessControlType:
          type: string
          enum: [public, private, restricted]
          description: Type of access control
        allowList:
          type: object
          additionalProperties: true
          description: Allow list for restricted access
        description:
          type: string
          description: Description of the field
        expiryTime:
          type: string
          description: Expiry time for the field
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    ConsentRecord:
      type: object
      properties:
        consentId:
          type: string
          description: Unique identifier for the consent record
        ownerId:
          type: string
          description: ID of the owner
        ownerEmail:
          type: string
          description: Email of the owner
        appId:
          type: string
          description: ID of the application
        status:
          type: string
          enum: [pending, granted, denied, expired, revoked]
          description: Status of the consent
        type:
          type: string
          description: Type of consent
        createdAt:
          type: string
          format: date-time
          description: When the consent was created
        updatedAt:
          type: string
          format: date-time
          description: When the consent was last updated
        expiresAt:
          type: string
          format: date-time
          description: When the consent expires
        grantDuration:
          type: string
          description: Duration of the grant
        fields:
          type: array
          items:
            type: string
          description: Fields covered by this consent
        sessionId:
          type: string
          description: Session ID for the consent
        consentPortalUrl:
          type: string
          description: URL to the consent portal
        updatedBy:
          type: string
          description: Who last updated the consent

    # V1 API Schemas
    EntityResponseV1:
      type: object
      properties:
        entityId:
          type: string
          description: Unique entity identifier
        name:
          type: string
          description: Entity name
        entityType:
          type: string
          description: Type of entity (provider, consumer, etc.)
        email:
          type: string
          description: Contact email
        phoneNumber:
          type: string
          description: Phone number
        providerId:
          type: string
          nullable: true
          description: Provider ID if entity is a provider
        consumerId:
          type: string
          nullable: true
          description: Consumer ID if entity is a consumer
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ProviderResponseV1:
      type: object
      properties:
        providerId:
          type: string
          description: Provider ID
        entityId:
          type: string
          description: Associated entity ID
        name:
          type: string
          description: Provider name
        entityType:
          type: string
          description: Entity type
        email:
          type: string
          description: Contact email
        phoneNumber:
          type: string
          description: Phone number
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ConsumerResponseV1:
      type: object
      properties:
        consumerId:
          type: string
          description: Consumer ID
        entityId:
          type: string
          description: Associated entity ID
        name:
          type: string
          description: Consumer name
        entityType:
          type: string
          description: Entity type
        email:
          type: string
          description: Contact email
        phoneNumber:
          type: string
          description: Phone number
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateProviderSchemaSubmissionRequestV1:
      type: object
      required:
        - schemaName
        - sdl
        - schemaEndpoint
      properties:
        schemaName:
          type: string
          description: Name of the schema
        schemaDescription:
          type: string
          description: Description of the schema
        sdl:
          type: string
          description: GraphQL SDL definition
        schemaEndpoint:
          type: string
          description: Schema endpoint URL
        previousSchemaId:
          type: string
          description: Previous schema ID for updates

    ProviderSchemaSubmissionResponseV1:
      type: object
      properties:
        submissionId:
          type: string
          description: Submission ID
        previousSchemaId:
          type: string
          nullable: true
          description: Previous schema ID
        schemaName:
          type: string
          description: Schema name
        schemaDescription:
          type: string
          nullable: true
          description: Schema description
        sdl:
          type: string
          description: GraphQL SDL
        schemaEndpoint:
          type: string
          description: Schema endpoint
        status:
          type: string
          description: Submission status
        providerId:
          type: string
          description: Provider ID
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateConsumerApplicationSubmissionRequestV1:
      type: object
      required:
        - applicationName
        - selectedFields
      properties:
        applicationName:
          type: string
          description: Name of the application
        applicationDescription:
          type: string
          description: Description of the application
        selectedFields:
          type: array
          items:
            type: string
          description: List of selected data fields
        previousApplicationId:
          type: string
          description: Previous application ID for updates

    ConsumerApplicationSubmissionResponseV1:
      type: object
      properties:
        submissionId:
          type: string
          description: Submission ID
        previousApplicationId:
          type: string
          nullable: true
          description: Previous application ID
        applicationName:
          type: string
          description: Application name
        applicationDescription:
          type: string
          nullable: true
          description: Application description
        selectedFields:
          type: array
          items:
            type: string
          description: Selected fields
        consumerId:
          type: string
          description: Consumer ID
        status:
          type: string
          description: Submission status
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CollectionResponseV1:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
          description: Collection items
        count:
          type: integer
          description: Total count of items

tags:
  - name: Health
    description: Health check endpoints
  - name: Debug
    description: Debug and diagnostic endpoints
  - name: Consumers
    description: Consumer management operations
  - name: Consumer Applications
    description: Consumer application management
  - name: Provider Submissions
    description: Provider submission management
  - name: Providers
    description: Provider profile management
  - name: Provider Schemas
    description: Provider schema management
  - name: Admin
    description: Administrative operations
  - name: Allow List Management
    description: Access control and allow list management
  - name: Consumer Grants
    description: Consumer grant management operations
  - name: Provider Fields
    description: Provider field metadata management
  - name: Consent Records
    description: Consent record management operations
  - name: V1 API
    description: Version 1 API endpoints with GORM and normalized database schema