openapi: 3.0.3
info:
  title: Consent Engine API
  description: |
    Handles consent creation, approval, and management for the OpenDIF Data Exchange Platform. 
    It uses a hybrid security model:
    - **User-facing endpoints** (GET/PUT/PATCH/DELETE /consents/{id}) are protected by User JWTs from an identity provider for consent-portal access.
    - **Internal endpoints** (POST /consents) require no authentication for service-to-service communication.
  version: 1.1.0
  contact:
    name: OpenDIF Team
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://consent-engine-dev.choreo.dev
    description: Choreo Development Environment
  - url: http://localhost:8081
    description: Local Development Environment

paths:
  /health:
    get:
      summary: Health Check
      description: Check if the service is running and healthy.
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy

  /consents:
    post:
      summary: Create Consent (Internal)
      description: Creates a new consent record. This is an internal endpoint intended to be called by other services like the Orchestration Engine. No authentication required.
      operationId: createConsent
      tags:
        - Consents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsentRequest'
            example:
              app_id: "passport-app"
              data_fields:
                - owner_type: "citizen"
                  owner_id: "test@opensource.lk"
                  fields:
                    - "personInfo.permanentAddress"
                    - "personInfo.fullName"
                    - "personInfo.nic"
              session_id: "session_123"
              grant_duration: "PT1H"
      responses:
        '201':
          description: Consent created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
              example:
                consent_id: "consent_8d255282"
                owner_id: "199512345678"
                owner_email: "test@opensource.lk"
                app_id: "passport-app"
                status: "pending"
                type: "data_sharing"
                created_at: "2025-09-21T10:30:00Z"
                updated_at: "2025-09-21T10:30:00Z"
                expires_at: "2025-09-22T10:30:00Z"
                grant_duration: "P30D"
                fields: ["personInfo.permanentAddress", "personInfo.photo"]
                session_id: "session_123"
                consent_portal_url: "https://consent-portal.example.com/?consent_id=consent_8d255282"
                purpose: "passport_application"
                message: "Consent created successfully"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /consents/{consentId}:
    get:
      summary: Get Consent by ID (User)
      description: Retrieves a specific consent record. Requires an authenticated user JWT where the user's identity matches the consent owner. Used by consent-portal.
      operationId: getConsentById
      tags:
        - Consents
      security:
        - UserJWTAuth: []
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent.
          schema:
            type: string
            example: "consent_8d255282"
      responses:
        '200':
          description: Consent found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentPortalView'
        '403':
          description: Forbidden - JWT token invalid or does not match consent owner.
        '404':
          description: Consent not found.
        '500':
          description: Internal server error.

    put:
      summary: Update Consent (User)
      description: Updates a consent record's status (e.g., approve, reject). Requires an authenticated user JWT where the user's identity matches the consent owner. Used by consent-portal.
      operationId: updateConsent
      tags:
        - Consents
      security:
        - UserJWTAuth: []
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsentRequest'
            example:
              status: "approved"
              updated_by: "user@example.com"
              grant_duration: "P30D"
              reason: "User approved consent via portal"
      responses:
        '200':
          description: Consent updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - JWT token invalid or does not match consent owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Partially Update Consent (User)
      description: Partially updates a consent record. Requires an authenticated user JWT where the user's identity matches the consent owner. Used by consent-portal.
      operationId: patchConsentById
      tags:
        - Consents
      security:
        - UserJWTAuth: []
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchConsentRequest'
            example:
              status: "approved"
              updated_by: "user@example.com"
              grant_duration: "P30D"
              reason: "User approved consent via portal"
              fields: ["personInfo.permanentAddress", "personInfo.fullName"]
      responses:
        '200':
          description: Consent updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - JWT token invalid or does not match consent owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Revoke Consent (User)
      description: Revokes an active consent record. Requires an authenticated user JWT where the user's identity matches the consent owner. Used by consent-portal.
      operationId: revokeConsent
      tags:
        - Consents
      security:
        - UserJWTAuth: []
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent.
          schema:
            type: string
      responses:
        '200':
          description: Consent revoked successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - JWT token invalid or does not match consent owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /data-owner/{ownerId}:
    get:
      summary: Get Consents by Data Owner (Internal)
      description: Retrieves all consents for a specific data owner. Internal use only.
      operationId: getConsentsByDataOwner
      tags:
        - Data Owner
      parameters:
        - name: ownerId
          in: path
          required: true
          description: Unique identifier for the data owner.
          schema:
            type: string
      responses:
        '200':
          description: Consents found and returned.
        '500':
          description: Internal server error.

  /admin/expiry-check:
    post:
      summary: Check for Expired Consents (Internal)
      description: A protected admin endpoint to trigger a check for expired consents.
      operationId: checkConsentExpiry
      tags:
        - Admin
      responses:
        '200':
          description: Expiry check completed successfully.
        '500':
          description: Internal server error.

components:
  schemas:
    CreateConsentRequest:
      type: object
      required:
        - app_id
        - data_fields
        - session_id
      properties:
        app_id:
          type: string
          description: ID of the consumer application requesting consent
          example: passport-app
        data_fields:
          type: array
          description: List of data fields that require consent
          items:
            $ref: '#/components/schemas/DataField'
        session_id:
          type: string
          description: Unique session identifier for tracking the consent request
          example: session_123
        grant_duration:
          type: string
          description: Duration for which the consent is valid in ISO 8601 format (optional)
          example: PT1H
          default: PT1H
          pattern: "^P(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$"
    DataField:
      type: object
      required:
        - owner_id
        - fields
      properties:
        owner_type:
          type: string
          description: Type of data owner (optional)
          example: citizen
        owner_id:
          type: string
          description: Unique identifier of the data owner (email address)
          example: test@opensource.lk
        owner_email:
          type: string
          description: Email address of the data owner (set automatically from owner_id)
          example: test@opensource.lk
        fields:
          type: array
          description: List of specific data fields being requested
          items:
            type: string
          example: ["personInfo.permanentAddress", "personInfo.fullName", "personInfo.nic"]
    UpdateConsentRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - expired
            - revoked
          description: New status for the consent
          example: approved
        updated_by:
          type: string
          description: ID of the user updating the consent (optional)
          example: user@example.com
        grant_duration:
          type: string
          description: Duration of the granted access (optional)
          example: P30D
          pattern: "^P(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$"
        reason:
          type: string
          description: Reason for the status update (optional)
          example: User approved consent via portal
    PatchConsentRequest:
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - expired
            - revoked
          description: New status for the consent (optional)
          example: approved
        updated_by:
          type: string
          description: ID of the user updating the consent (optional)
          example: user@example.com
        grant_duration:
          type: string
          description: Duration of the granted access (optional)
          example: P30D
          pattern: "^P(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$"
        reason:
          type: string
          description: Reason for the status update (optional)
          example: User approved consent via portal
        fields:
          type: array
          description: List of data fields covered by this consent (optional)
          items:
            type: string
          example: ["personInfo.permanentAddress", "personInfo.fullName"]
    ConsentResponse:
      type: object
      properties:
        consent_id:
          type: string
          description: Unique identifier for the consent
          example: consent_8d255282
        owner_id:
          type: string
          description: ID of the data owner
          example: test-owner-123
        owner_email:
          type: string
          description: Email address of the data owner
          example: owner@example.com
        app_id:
          type: string
          description: ID of the consumer application
          example: passport-app
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - expired
            - revoked
          description: Current status of the consent
          example: pending
        type:
          type: string
          enum:
            - realtime
            - offline
          description: Type of consent workflow
          example: realtime
        created_at:
          type: string
          format: date-time
          description: When the consent was created
          example: "2025-09-15T09:58:34.05668193Z"
        updated_at:
          type: string
          format: date-time
          description: When the consent was last updated
          example: "2025-09-15T09:58:34.056682055Z"
        expires_at:
          type: string
          format: date-time
          description: When the consent expires
          example: "2025-10-15T09:58:34.056536639Z"
        grant_duration:
          type: string
          description: Duration of the granted access
          example: P30D
          pattern: "^P(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$"
        fields:
          type: array
          description: List of data fields covered by this consent
          items:
            type: string
          example: ["person.permanentAddress", "person.photo"]
        session_id:
          type: string
          description: Session identifier for tracking
          example: test-session-123
        consent_portal_url:
          type: string
          description: URL to redirect after consent approval/denial
          example: "https://consent-portal.example.com/?consent_id=consent_8d255282"
        purpose:
          type: string
          description: Purpose for data access
          example: passport_application
        message:
          type: string
          description: Status message
          example: "Consent created successfully"

    ConsentPortalUpdateRequest:
      type: object
      required:
        - status
        - updated_by
      properties:
        status:
          type: string
          enum:
            - approved
            - rejected
          description: New status of the consent
          example: approved
        updated_by:
          type: string
          description: ID of the data owner
          example: citizen_199512345678
        reason:
          type: string
          description: Reason for the status update
          example: User approved consent via portal
    ConsentPortalView:
      type: object
      properties:
        app_display_name:
          type: string
          description: Human-readable name of the application
          example: "Passport App"
        created_at:
          type: string
          format: date-time
          description: When the consent was created
          example: "2025-09-15T14:51:14.395412+05:30"
        fields:
          type: array
          description: List of data fields covered by this consent
          items:
            type: string
          example: ["personInfo.permanentAddress", "personInfo.fullName"]
        owner_name:
          type: string
          description: Human-readable name of the data owner
          example: "Test User"
        owner_email:
          type: string
          description: Email address of the data owner
          example: "test@opensource.lk"
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - expired
            - revoked
          description: Current status of the consent
          example: "pending"
        type:
          type: string
          enum:
            - realtime
            - offline
          description: Type of consent workflow
          example: "realtime"
    ErrorResponse:
      type: object
      properties:
        error:
          type: string

  securitySchemes:
    UserJWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: A user-specific JWT obtained from an identity provider (e.g., Asgardeo) after login. Required for all public-facing endpoints that interact with user-specific data.

tags:
  - name: Health
    description: Health check endpoints
  - name: Consents
    description: Core consent management operations
  - name: Data Owner
    description: Operations related to data owners
  - name: Admin
    description: Protected administrative operations