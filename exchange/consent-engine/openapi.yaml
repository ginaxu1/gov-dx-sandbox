openapi: 3.0.3
info:
  title: Consent Engine API
  description: |
    Consent Engine API for managing data consent workflows in the Data Exchange Platform.
    This service handles consent creation, approval, tracking, and management for data access requests.
  version: 1.0.0
  contact:
    name: OpenDIF Team
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://consent-engine.choreo.dev
    description: Choreo Production Environment
  - url: https://consent-engine-dev.choreo.dev
    description: Choreo Development Environment
  - url: http://localhost:8081
    description: Local Development Environment

paths:
  /health:
    get:
      summary: Health Check
      description: Check if the consent engine service is running and healthy
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: consent-engine
                  status:
                    type: string
                    example: healthy

  /consents:
    post:
      summary: Create Consent
      description: Create a new consent record for data access
      operationId: createConsent
      tags:
        - Consents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsentRequest'
      responses:
        '201':
          description: Consent created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /consents/{consentId}:
    get:
      summary: Get Consent by ID
      description: Retrieve a specific consent record by its ID
      operationId: getConsentById
      tags:
        - Consents
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent
          schema:
            type: string
            example: consent_8d255282
      responses:
        '200':
          description: Consent found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '404':
          description: Consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update Consent
      description: Update a specific consent record by its ID
      operationId: updateConsent
      tags:
        - Consents
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent
          schema:
            type: string
            example: consent_8d255282
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsentRequest'
      responses:
        '200':
          description: Consent updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Update Consent (Alternative)
      description: Alternative endpoint to update a specific consent record by its ID
      operationId: updateConsentById
      tags:
        - Consents
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent
          schema:
            type: string
            example: consent_8d255282
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentPortalUpdateRequest'
      responses:
        '200':
          description: Consent updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Revoke Consent
      description: Revoke a specific consent record by its ID
      operationId: revokeConsent
      tags:
        - Consents
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent
          schema:
            type: string
            example: consent_8d255282
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeConsentRequest'
      responses:
        '200':
          description: Consent revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /data-owner/{ownerId}:
    get:
      summary: Get Consents by Data Owner
      description: Retrieve all consents for a specific data owner
      operationId: getConsentsByDataOwner
      tags:
        - Data Owner
      parameters:
        - name: ownerId
          in: path
          required: true
          description: Unique identifier for the data owner
          schema:
            type: string
            example: test-owner-123
      responses:
        '200':
          description: Consents found and returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  consents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsentResponse'
                  count:
                    type: integer
                    example: 5
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /consumer/{consumerId}:
    get:
      summary: Get Consents by Consumer
      description: Retrieve all consents for a specific consumer application
      operationId: getConsentsByConsumer
      tags:
        - Consumer
      parameters:
        - name: consumerId
          in: path
          required: true
          description: Unique identifier for the consumer application
          schema:
            type: string
            example: passport-app
      responses:
        '200':
          description: Consents found and returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  consents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsentResponse'
                  count:
                    type: integer
                    example: 3
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /consent-website:
    get:
      summary: Consent Portal Website
      description: Serve the consent portal website for data owners to approve/deny consents
      operationId: getConsentWebsite
      tags:
        - Portal
      responses:
        '200':
          description: Consent portal website
          content:
            text/html:
              schema:
                type: string
        '500':
          description: Internal server error

  /consent-portal/{consentId}:
    post:
      summary: Handle Consent Portal Actions
      description: Process actions from the consent portal (approve/deny)
      operationId: handleConsentPortalAction
      tags:
        - Portal
      parameters:
        - name: consentId
          in: path
          required: true
          description: Unique identifier for the consent
          schema:
            type: string
            example: consent_8d255282
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentPortalAction'
      responses:
        '200':
          description: Action processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          description: Bad request - invalid action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/expiry-check:
    post:
      summary: Check Expired Consents
      description: Check for and update expired consent records
      operationId: checkConsentExpiry
      tags:
        - Admin
      responses:
        '200':
          description: Expiry check completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  expired_records:
                    type: array
                    description: List of expired consent records
                    items:
                      $ref: '#/components/schemas/ConsentResponse'
                  count:
                    type: integer
                    description: Number of expired records found
                    example: 0
                  checked_at:
                    type: string
                    format: date-time
                    description: When the expiry check was performed
                    example: "2025-09-16T16:22:12.38733+05:30"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateConsentRequest:
      type: object
      required:
        - app_id
        - data_fields
        - purpose
        - session_id
      properties:
        app_id:
          type: string
          description: ID of the consumer application requesting data
          example: passport-app
        data_fields:
          type: array
          description: List of data field groups with ownership information
          items:
            $ref: '#/components/schemas/DataFieldGroup'
        purpose:
          type: string
          description: Purpose for data access
          example: passport_application
        session_id:
          type: string
          description: Session identifier for tracking
          example: test-session-123

    DataFieldGroup:
      type: object
      required:
        - owner_type
        - owner_id
        - fields
      properties:
        owner_type:
          type: string
          description: Type of data owner (citizen, organization, etc.)
          example: citizen
        owner_id:
          type: string
          description: Unique identifier for the data owner
          example: test-owner-123
        fields:
          type: array
          description: List of data fields requiring consent
          items:
            type: string
          example: ["person.permanentAddress", "person.photo"]

    UpdateConsentRequest:
      type: object
      required:
        - status
        - updated_by
        - reason
      properties:
        status:
          type: string
          enum: [pending, approved, rejected, expired, revoked]
          description: New status of the consent
          example: approved
        grant_duration:
          type: string
          description: Duration of the granted access (e.g., "1h", "1d", "30d")
          example: "1d"
        updated_by:
          type: string
          description: ID of the user who updated the consent
          example: citizen_199512345678
        reason:
          type: string
          description: Reason for the status update
          example: User approved consent via portal

    ConsentPortalAction:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [approved, rejected, revoked]
          description: Action to take on the consent
          example: approved

    ConsentResponse:
      type: object
      properties:
        consent_id:
          type: string
          description: Unique identifier for the consent
          example: consent_8d255282
        owner_id:
          type: string
          description: ID of the data owner
          example: test-owner-123
        app_id:
          type: string
          description: ID of the consumer application
          example: passport-app
        status:
          type: string
          enum: [pending, approved, rejected, expired]
          description: Current status of the consent
          example: pending
        type:
          type: string
          enum: [realtime, batch]
          description: Type of consent workflow
          example: realtime
        created_at:
          type: string
          format: date-time
          description: When the consent was created
          example: "2025-09-15T09:58:34.05668193Z"
        updated_at:
          type: string
          format: date-time
          description: When the consent was last updated
          example: "2025-09-15T09:58:34.056682055Z"
        expires_at:
          type: string
          format: date-time
          description: When the consent expires
          example: "2025-10-15T09:58:34.056536639Z"
        grant_duration:
          type: string
          description: Duration of the granted access
          example: 30d
        fields:
          type: array
          description: List of data fields covered by this consent
          items:
            type: string
          example: ["person.permanentAddress", "person.photo"]
        session_id:
          type: string
          description: Session identifier for tracking
          example: test-session-123
        consent_portal_url:
          type: string
          description: URL to redirect after consent approval/denial
          example: "http://localhost:5173/?consent_id=consent_8d255282"

    ConsentPortalUpdateRequest:
      type: object
      required:
        - status
        - owner_id
        - message
      properties:
        status:
          type: string
          enum: [approved, rejected]
          description: New status of the consent
          example: approved
        owner_id:
          type: string
          description: ID of the data owner
          example: citizen_199512345678
        message:
          type: string
          description: Message for the status update
          example: User approved consent via portal

    RevokeConsentRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          description: Reason for revoking the consent
          example: User requested revocation

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid consent ID"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Health
    description: Health check endpoints
  - name: Consents
    description: Consent management operations
  - name: Data Owner
    description: Data owner related operations
  - name: Consumer
    description: Consumer application related operations
  - name: Portal
    description: Consent portal operations
  - name: Admin
    description: Administrative operations
