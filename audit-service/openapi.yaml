openapi: 3.0.3
info:
  title: Audit Service API
  description: |
    Audit Service API for tracking and retrieving data access audit logs.
    
    This service provides endpoints for:
    - Creating audit log entries (POST /api/logs)
    - Retrieving audit logs for different portals (GET /api/logs)
    
    The service maintains a comprehensive audit trail of all data access requests
    with simplified log structure for easy consumption by admin and entity portals.
  version: 1.0.0
  contact:
    name: Gov DX Sandbox Team
    email: support@gov-dx-sandbox.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Local development server
  - url: https://audit-service.gov-dx-sandbox.com
    description: Production server

security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health Check
      description: Check if the audit service is running and healthy
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "Audit Service is healthy"
        '500':
          description: Service is unhealthy
          content:
            text/plain:
              schema:
                type: string
                example: "Service unavailable"

  /api/logs:
    get:
      summary: Get Logs
      description: |
        Retrieve audit logs with optional filtering. Supports filtering by consumerId, providerId, status, and date range.
        
        **For Admin Portal**: Call without parameters to get all logs
        **For Entity Portal (Consumer)**: Call with `?consumerId={consumerId}` to get logs for a specific consumer
        **For Entity Portal (Provider)**: Call with `?providerId={providerId}` to get logs for a specific provider
      operationId: getLogs
      tags:
        - Logs
      parameters:
        - name: consumerId
          in: query
          description: Filter logs by consumer ID
          required: false
          schema:
            type: string
            example: "consumer-123"
        - name: providerId
          in: query
          description: Filter logs by provider ID
          required: false
          schema:
            type: string
            example: "provider-456"
        - name: status
          in: query
          description: Filter logs by status
          required: false
          schema:
            type: string
            enum: [success, failure]
            example: "success"
        - name: startDate
          in: query
          description: Filter logs from this date (YYYY-MM-DD format)
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: endDate
          in: query
          description: Filter logs until this date (YYYY-MM-DD format)
          required: false
          schema:
            type: string
            format: date
            example: "2024-12-31"
        - name: limit
          in: query
          description: Maximum number of logs to return (default 50, max 1000)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          example: 100
        - name: offset
          in: query
          description: Number of logs to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
      responses:
        '200':
          description: Successfully retrieved logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
              examples:
                admin_portal:
                  summary: Admin Portal Response
                  value:
                    logs:
                      - id: "550e8400-e29b-41d4-a716-446655440000"
                        timestamp: "2024-01-15T10:30:00Z"
                        status: "success"
                        requestedData: "query { personInfo(nic: \"199512345678\") { fullName } }"
                        consumerId: "consumer-123"
                        providerId: "provider-456"
                      - id: "550e8400-e29b-41d4-a716-446655440001"
                        timestamp: "2024-01-15T10:25:00Z"
                        status: "failure"
                        requestedData: "query { vehicleInfo(plate: \"ABC-1234\") { model } }"
                        consumerId: "consumer-789"
                        providerId: "provider-456"
                    total: 2
                    limit: 50
                    offset: 0
                consumer_portal:
                  summary: Consumer Portal Response
                  value:
                    logs:
                      - id: "550e8400-e29b-41d4-a716-446655440000"
                        timestamp: "2024-01-15T10:30:00Z"
                        status: "success"
                        requestedData: "query { personInfo(nic: \"199512345678\") { fullName } }"
                        consumerId: "consumer-123"
                        providerId: "provider-456"
                    total: 1
                    limit: 50
                    offset: 0
        '400':
          description: Bad request - invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Log Entry
      description: Create a new audit log entry
      operationId: createLog
      tags:
        - Logs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogRequest'
            examples:
              success_log:
                summary: Successful Request Log
                value:
                  status: "success"
                  requestedData: "query { personInfo(nic: \"199512345678\") { fullName } }"
                  consumerId: "consumer-123"
                  providerId: "provider-456"
              failure_log:
                summary: Failed Request Log
                value:
                  status: "failure"
                  requestedData: "query { vehicleInfo(plate: \"ABC-1234\") { model } }"
                  consumerId: "consumer-789"
                  providerId: "provider-456"
      responses:
        '201':
          description: Log created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                timestamp: "2024-01-15T10:30:00Z"
                status: "success"
                requestedData: "query { personInfo(nic: \"199512345678\") { fullName } }"
                consumerId: "consumer-123"
                providerId: "provider-456"
        '400':
          description: Bad request - invalid log data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  schemas:
    Log:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          enum: [success, failure]
          example: "success"
        requestedData:
          type: string
          description: The GraphQL query that was requested
          example: "query { personInfo(nic: \"199512345678\") { fullName } }"
        consumerId:
          type: string
          example: "consumer-123"
        providerId:
          type: string
          example: "provider-456"
      required:
        - id
        - timestamp
        - status
        - requestedData

    LogRequest:
      type: object
      properties:
        status:
          type: string
          enum: [success, failure]
          example: "success"
        requestedData:
          type: string
          description: The GraphQL query that was requested
          example: "query { personInfo(nic: \"199512345678\") { fullName } }"
        consumerId:
          type: string
          example: "consumer-123"
        providerId:
          type: string
          example: "provider-456"
      required:
        - status
        - requestedData

    LogResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
        total:
          type: integer
          description: Total number of logs matching the filter
          example: 150
        limit:
          type: integer
          description: Maximum number of logs returned
          example: 50
        offset:
          type: integer
          description: Number of logs skipped for pagination
          example: 0
      required:
        - logs
        - total
        - limit
        - offset

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request parameters"
        code:
          type: string
          description: Error code
          example: "INVALID_PARAMETERS"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
      required:
        - error

tags:
  - name: Health
    description: Health check endpoints
  - name: Logs
    description: Simplified log access for admin and entity portals